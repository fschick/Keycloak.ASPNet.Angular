using Keycloak.ASPNet.Angular.Api.Models;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace Keycloak.ASPNet.Angular.Api.Filters;

/// <summary>
/// Transforms Keycloak client roles to JWT role claims.
/// </summary>
/// <example>
/// "resource_access": {
///     "api": {
///         "roles": [
///             "manage"
///         ]
///     },
/// },
/// </example>
/// <seealso cref="IClaimsTransformation" />
public class ClientRoleTransformation : IClaimsTransformation
{
    private readonly string _clientId;

    /// <summary>
    /// Initializes a new instance of the <see cref="KeycloakJwtTransformation"/> class.
    /// </summary>
    /// <param name="configuration">The configuration.</param>
    /// <autogeneratedoc />
    public ClientRoleTransformation(IConfiguration configuration)
        => _clientId = configuration.GetSection("JwtBearer").Get<JwtBearerOptions>().Audience;

    /// <summary>
    /// Provides a central transformation point to change the specified principal.
    /// Note: this will be run on each AuthenticateAsync call, so its safer to
    /// return a new ClaimsPrincipal if your transformation is not idempotent.
    /// </summary>
    /// <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal" /> to transform.</param>
    /// <returns>
    /// The transformed principal.
    /// </returns>
    public Task<ClaimsPrincipal> TransformAsync(ClaimsPrincipal principal)
    {
        var result = principal.Clone();
        if (result.Identity is not ClaimsIdentity identity)
            return Task.FromResult(result);

        var resourceAccessValue = principal.FindFirst("resource_access")?.Value;
        if (string.IsNullOrWhiteSpace(resourceAccessValue))
            return Task.FromResult(result);

        var clients = JsonConvert.DeserializeObject<KeycloakJwtClientRoles>(resourceAccessValue);
        if (clients == null)
            return Task.FromResult(result);

        var clientRoleContainer = clients.FirstOrDefault(x => x.Key == _clientId);
        if (clientRoleContainer.Key == null)
            return Task.FromResult(result);

        var clientRoles = clientRoleContainer.Value.Roles
            .Where(role => !string.IsNullOrWhiteSpace(role));

        foreach (var role in clientRoles)
            identity.AddClaim(new Claim(ClaimsIdentity.DefaultRoleClaimType, role));

        return Task.FromResult(result);
    }
}